package com.iluwatar.strategy.com.cherish.strategy.impl;

/**
 * 需求：实现一个简化的报价管理
 *      1）普通客户或者新客户报全价；
 *      2）老客户的价格，同一折扣5%；
 *      3）大客户的价格，统一折扣10%，
 * 实现方案：
 *      if 模式
 *          1）价格类包含所有计算报价的算法，使得价格类，尤其是报价这个方法比较庞杂，难以维护。
 *          2）经常会有这样的需求，在不同的时候，使用不同的计算方式。这意味着计算报价的方式会经常被修改，或者被切换。
 *              比如：在公司周年庆的时候，所有客户额外增加 3% 的折扣
 *          3）通常情况下是切换，因为过了促销时间，又会回到正常的价格体系上来。而现在的价格类中计算报价的方法，是固定调用各种计算方式，使得切换调用不同的计算方式很麻烦，每次都需要修改 if-else 中的调用代码。
 *      策略模式：定义一系列的算法，把它们一个个封装起来，并使他们可以相互替换。本模式使得算法可以独立于使用它的客户而变化。
 *
 *
 * @decription 策略模式的重心不是如何实现算法，而是如何组织、调用这些算法，从而让程序结构更灵活。
 *
 * @author zengjia
 */
public interface Strategy {

    /**
     * 计算应报的价格
     */
    double calcPrice(double goodsPrice);
}
